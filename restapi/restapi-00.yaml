AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS CloudFormation template - Lambda function behind API Gateway"

Parameters:
  S3Bucket:
    Type: String
  S3Key:
    Type: String

Resources:
  #the lambda function to invoke
  GreetingLambda:
    Type: AWS::Lambda::Function
    Description: A simple greeting function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3Key
      FunctionName: GreetingLambda
      Handler: lambda.handler
      Role: !GetAtt [LambdaExecutionRole, Arn]
      Runtime: nodejs6.10

  #the execution role the lambda will use
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  #Creating the RestApi
  GreetingApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Greeting API
      Description: API used for Greeting requests
      FailOnWarnings: true

  #Permission for apigateway to invoke lambda
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt [GreetingLambda, Arn]
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Join ["", ["arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !Ref "GreetingApi", "/*"]]

  #Allow ApiGateway to interact with CloudWatch
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                  - "logs:GetLogEvents"
                  - "logs:FilterLogEvents"
                Resource: "*"

  #resource (role) uses to write cloudwatch logs
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt [ApiGatewayCloudWatchLogsRole, Arn]

  #stage for API deployment
  GreetingApiStage:
    DependsOn: ApiGatewayAccount
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
      RestApiId: !Ref GreetingApi
      StageName: LATEST
      Variables:
        Owner: floresj4

  #deployment making the API callable over the internet
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - "GreetingRequestGET"
#      - "GreetingRequestPOST"
    Properties:
      RestApiId: !Ref GreetingApi
      StageName: DummyStage

  #creates a resource (uri) in the API
  GreetingResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GreetingApi
      ParentId: !GetAtt [GreetingApi, RootResourceId]
      PathPart: greeting

  #define the parameters and body the clients must send in their requests
  GreetingRequestGET:
    DependsOn: LambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join ["", ["arn:aws:apigateway:", !Ref "AWS::Region", ":lambda:path/2015-03-31/functions/", !GetAtt [GreetingLambda, Arn], "/invocations"]]
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              "application/json": "$input.json('$.body')"

        #include request templates here

      RequestParameters:
        "method.request.querystring.name": false
      ResourceId: !Ref GreetingResource
      RestApiId: !Ref GreetingApi
      MethodResponses:
        - StatusCode: 200

#  Outputs:
#    RootUrl:
#      Description: Root URL of the API gateway
#      Value: !Join ["", ["https://", !Ref GreetingApi, ".execute-api.", !Ref "AWS::Region", ".amazonaws.com"]]